# Copyright 2018 Markus Frings (frings@cats.rwth-aachen.de)
#
# This file is part of SSOPT.
#
# SSOPT is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation version 3 of the License.
#
# SSOPT is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License along with SSOPT.  If not, see
# <http://www.gnu.org/licenses/>.
#

import os
from method import get_method
from variables import Variables


file_header = \
    "# This file is generated by SSOPT. SSOPT is a tool for optimization of the shot curve during slow shot phase \n" \
    "# of high-pressure die casting. Do not change this file manually.\n" \
    "#\n" \
    "# For more information on SSOPT checkout https://github.com/mfcats/SSOPT.\n\n"


class Dakota():
    def __init__(self, params):
        self.workdir = params['general']['workdir']
        self.outputfile = params['study']['outputfile']
        self.method = get_method(params)
        self.njobs = params['study']['njobs']
        self.variables = Variables(params)

    def run(self):
        self.generate_input_file()

    def generate_input_file(self):
        self.create_workdir()
        with open(self.workdir + '/dakota.in', 'w') as f:
            self.print_header(f)
            self.print_environment(f)
            self.print_model(f)
            self.method.print_method(f)
            self.print_interface(f)
            self.variables.print_variables(f)
            self.method.print_responses(f)

    def create_workdir(self):
        os.mkdir(self.workdir)

    @staticmethod
    def print_header(inputfile):
        inputfile.writelines(file_header)

    def print_environment(self, inputfile):
        inputfile.writelines(["environment\n",
                              "  tabulat_data\n",
                              "    tabular_data_file = '" + self.outputfile + "'\n\n"])

    @staticmethod
    def print_model(inputfile):
        inputfile.writelines("model\n  single\n\n")

    def print_interface(self, inputfile):
        inputfile.writelines(["interface\n",
                              "  fork\n",
                              "    analysis_driver = 'runiteration.py'\n",
                              "    work_directory\n",
                              "      named = './iteration'\n",
                              "      copy_files = '0/' 'constant/ 'system/'\n",
                              "      directory_tag\n",
                              "      directory_save\n",
                              "  failure_capture recover "])
        for i in range(0, self.method.number_of_responses):
            inputfile.writelines(['NaN '])
        inputfile.writelines("\n")
        inputfile.writelines("  asynchronous\n    evaluation_concurr = ")
        inputfile.writelines(str(self.njobs) + "\n\n")
